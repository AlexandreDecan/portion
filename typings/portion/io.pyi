"""
This type stub file was generated by pyright.
"""

def from_string(
    string,
    conv,
    *,
    bound=...,
    disj=...,
    sep=...,
    left_open=...,
    left_closed=...,
    right_open=...,
    right_closed=...,
    pinf=...,
    ninf=...,
    klass=...,
):  # -> Interval:
    """
    Parse given string and create an Interval instance.
    A converter function has to be provided to convert a bound (as string) to a value.
    This function raises a ValueError if given string cannot be parsed to an interval.

    :param string: string to parse.
    :param conv: function to convert a bound (as string) to an object.
    :param bound: regex pattern for a value.
    :param disj: regex pattern for disjunctive operator (default matches '|' and ' | ').
    :param sep: regex pattern for bound separator (default matches ',').
    :param left_open: regex pattern for left open boundary (default matches '(').
    :param left_closed: regex pattern for left closed boundary (default
        matches '[').
    :param right_open: regex pattern for right open boundary (default matches ')').
    :param right_closed: regex pattern for right closed boundary (default
        matches ']').
    :param pinf: regex pattern for positive infinity (default matches '+inf').
    :param ninf: regex pattern for negative infinity (default matches '-inf').
    :param klass: class to use for creating intervals (default to Interval).
    :return: an interval.
    """
    ...

def to_string(
    interval,
    conv=...,
    *,
    disj=...,
    sep=...,
    left_open=...,
    left_closed=...,
    right_open=...,
    right_closed=...,
    pinf=...,
    ninf=...,
):  # -> str:
    """
    Export given interval to string.

    :param interval: an interval.
    :param conv: function that is used to represent a bound (default is `repr`).
    :param disj: string representing disjunctive operator (default is ' | ').
    :param sep: string representing bound separator (default is ',').
    :param left_open: string representing left open boundary (default is '(').
    :param left_closed: string representing left closed boundary (default is '[').
    :param right_open: string representing right open boundary (default is ')').
    :param right_closed: string representing right closed boundary (default is ']').
    :param pinf: string representing a positive infinity (default is '+inf').
    :param ninf: string representing a negative infinity (default is '-inf').
    :return: a string representation for given interval.
    """
    ...

def from_data(data, conv=..., *, pinf=..., ninf=..., klass=...):  # -> Interval:
    """
    Import an interval from a list of 4-uples (left, lower, upper, right).

    :param data: a list of 4-uples (left, lower, upper, right).
    :param conv: function to convert bound values, default to identity.
    :param pinf: value used to represent positive infinity.
    :param ninf: value used to represent negative infinity.
    :param klass: class to use for creating intervals (default to Interval).
    :return: an interval.
    """
    ...

def to_data(interval, conv=..., *, pinf=..., ninf=...):  # -> list[Any]:
    """
    Export given interval to a list of 4-uples (left, lower, upper, right).

    :param interval: an interval.
    :param conv: function to convert bound values, default to identity.
    :param pinf: value used to encode positive infinity.
    :param ninf: value used to encode negative infinity.
    :return: a list of 4-uples (left, lower, upper, right)
    """
    ...
