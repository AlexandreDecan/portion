"""
This type stub file was generated by pyright.
"""

from collections.abc import MutableMapping
from .interval import Interval

class IntervalDict(MutableMapping):
    """
    An IntervalDict is a dict-like data structure that maps from intervals to data,where
    keys can be single values or Interval instances.

    When keys are Interval instances, its behaviour merely corresponds to range queries
    and it returns IntervalDict instances corresponding to the subset of values covered
    by the given interval. If no matching value is found, an empty IntervalDict is
    returned.

    When keys are "single values", its behaviour corresponds to the one of Python
    built-in dict. When no matching value is found, a KeyError is raised.

    Note that this class does not aim to have the best performance, but is provided
    mainly for convenience. Its performance mainly depends on the number of distinct
    values (not keys) that are stored.
    """
    __slots__ = ...
    _klass = Interval
    def __init__(self, mapping_or_iterable=...) -> None:
        """
        Return a new IntervalDict.

        If no argument is given, an empty IntervalDict is created. If an argument
        is given, and is a mapping object (e.g., another IntervalDict), an
        new IntervalDict with the same key-value pairs is created. If an
        iterable is provided, it has to be a list of (key, value) pairs.

        :param mapping_or_iterable: optional mapping or iterable.
        """
        ...
    
    def clear(self): # -> None:
        """
        Remove all items from the IntervalDict.
        """
        ...
    
    def copy(self): # -> Self:
        """
        Return a shallow copy.

        :return: a shallow copy.
        """
        ...
    
    def get(self, key, default=...): # -> Self | None:
        """
        Return the values associated to given key.

        If the key is a single value, it returns a single value (if it exists) or
        the default value. If the key is an Interval, it returns a new IntervalDict
        restricted to given interval. In that case, the default value is used to
        "fill the gaps" (if any) w.r.t. given key.

        :param key: a single value or an Interval instance.
        :param default: default value (default to None).
        :return: an IntervalDict, or a single value if key is not an Interval.
        """
        ...
    
    def find(self, value): # -> _klass:
        """
        Return a (possibly empty) Interval i such that self[i] = value, and
        self[~i] != value.

        :param value: value to look for.
        :return: an Interval instance.
        """
        ...
    
    def items(self): # -> SortedItemsView:
        """
        Return a view object on the contained items sorted by their key
        (see https://docs.python.org/3/library/stdtypes.html#dict-views).

        :return: a view object.
        """
        ...
    
    def keys(self): # -> SortedKeysView:
        """
        Return a view object on the contained keys (sorted)
        (see https://docs.python.org/3/library/stdtypes.html#dict-views).

        :return: a view object.
        """
        ...
    
    def values(self): # -> SortedValuesView:
        """
        Return a view object on the contained values sorted by their key
        (see https://docs.python.org/3/library/stdtypes.html#dict-views).

        :return: a view object.
        """
        ...
    
    def domain(self): # -> _klass:
        """
        Return an Interval corresponding to the domain of this IntervalDict.

        :return: an Interval.
        """
        ...
    
    def pop(self, key, default=...): # -> Self | None:
        """
        Remove key and return the corresponding value if key is not an Interval.
        If key is an interval, it returns an IntervalDict instance.

        This method combines self[key] and del self[key]. If a default value
        is provided and is not None, it uses self.get(key, default) instead of
        self[key].

        :param key: a single value or an Interval instance.
        :param default: optional default value.
        :return: an IntervalDict, or a single value if key is not an Interval.
        """
        ...
    
    def popitem(self): # -> tuple[Any, Any]:
        """
        Remove and return some (key, value) pair as a 2-tuple.
        Raise KeyError if D is empty.

        :return: a (key, value) pair.
        """
        ...
    
    def setdefault(self, key, default=...): # -> Self | None:
        """
        Return given key. If it does not exist, set its value to given default
        and return it.

        :param key: a single value or an Interval instance.
        :param default: default value (default to None).
        :return: an IntervalDict, or a single value if key is not an Interval.
        """
        ...
    
    def update(self, mapping_or_iterable): # -> None:
        """
        Update current IntervalDict with provided values.

        If a mapping is provided, it must map Interval instances to values (e.g.,
        another IntervalDict). If an iterable is provided, it must consist of a
        list of (key, value) pairs.

        :param mapping_or_iterable: mapping or iterable.
        """
        ...
    
    def combine(self, other, how, *, missing=..., pass_interval=...): # -> Self:
        """
        Return a new IntervalDict that combines the values from current and
        provided IntervalDict.

        If d = d1.combine(d2, f), then d contains (1) all values from d1 whose
        keys do not intersect the ones of d2, (2) all values from d2 whose keys
        do not intersect the ones of d1, and (3) f(x, y) for x in d1, y in d2 for
        intersecting keys.

        When missing is set, the how function is called even for non-intersecting
        keys using the value of missing to replace the missing values. This is,
        case (1) corresponds to f(x, missing) and case (2) to f(missing, y).

        If pass_interval is set to True, the current interval will be passed to
        the "how" function as third parameter.

        :param other: another IntervalDict instance.
        :param how: a function combining two values.
        :param missing: if set, use this value for missing values when calling "how".
        :param pass_interval: if set, provide the current interval to the how function.
        :return: a new IntervalDict instance.
        """
        ...
    
    def as_dict(self, atomic=...): # -> dict[Any, Any]:
        """
        Return the content as a classical Python dict.

        :param atomic: whether keys are atomic intervals.
        :return: a Python dict.
        """
        ...
    
    def __getitem__(self, key): # -> Self:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __or__(self, other): # -> Self:
        ...
    
    def __ior__(self, other): # -> Self:
        ...
    
    def __iter__(self): # -> chain[Any]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


